import DFA
import NFA
import VisDFA
import Hidden
import Data.List (isInfixOf)

sigma = "abcd"

findFixed :: DFA 
findFixed = ([0,1,2,3],sigma, t, 0, [2])
    where
    t = [ ((0,'a'),1)
        , ((0,'b'),3)
        , ((0,'c'),0)
        , ((0,'d'),0)
        , ((1,'a'),1)
        , ((1,'b'),2)
        , ((1,'c'),0)
        , ((1,'d'),0)
        , ((2,'a'),2)
        , ((2,'b'),2)
        , ((2,'c'),2)
        , ((2,'d'),2)
        , ((3,'a'),1)
        , ((3,'b'),3)
        , ((3,'c'),2)
        , ((3,'d'),0)]

--fixDict is a function that removes a word from the dict 
--if a substring of the word is accepted into the dict
--for example if "ab" is accepted "abc" is accepted
--if "bc" is accepted "abc" is accepted
hasSubstring :: String -> [String] -> Bool
hasSubstring word dict = True `elem` [x`isInfixOf`word && x/= word|x<-dict]

fixDict :: [String] -> [String]
fixDict dict = [x|x<-dict, (hasSubstring x dict == False)]

--some constants

--all the strings will start at state 0 and accepted strings end at state 1
start = 0
end = 1

--the minimum is having states 1 and 0
minstates = 2

--a string can have any prefix and any suffix 
--as long as the accepted string exists somewhere
initial = [((s,x),s)|s <-[start,end],x<-sigma]

--function that given a string and the first state it can go to
--output a list of Transn for the string
getTransn :: String -> Int -> [Transn]
getTransn [a] from = [((start,a),end)]
getTransn word from = [((start,x),from)] ++ [((i + from,ys !! i),i+from+1)|i <-[0..length ys-1]]++[((to,z),end)]
    where x = head word
          z = last word
          ys = init(tail(word))
          to = from + length ys
          
--A function that given dictionary, outputs the indexes the words can start from
getInd :: [String] -> [Int]
getInd dict = [minstates]++ [x+minstates|x<-init (scanl1 (+) [length x-1|x<-dict])]

--A function that given a list of the dictionary and index, output all the Transn
getAll :: [String] -> [Int] -> [Transn]
getAll [] _ = []
getAll _ [] = []
getAll (x:xs) (y:ys) = (getTransn x y) ++ (getAll xs ys)

--if the there is an empty string it takes all strings
findDict :: [String] -> NFA
findDict dict 
    | "" `elem` dict = ([start],x,[((s,x),s)|s <-[start],x<-sigma] ++ [((start,eps),start)],q0,q0)
    | otherwise = (q, x, t, q0, a)
    where fdict = fixDict dict
          q = [x|x<- [start..(minstates + sum [length x-1|x<-fdict]-1)]]
          x = sigma
          t = initial ++ getAll fdict (getInd fdict)
          q0 = [start]
          a = [end]

--q = from 0 to Ud (have to minus 1 because generated list already has 0)
test = ["ab","abc","bc"]
ans = findDict ["ab","abc","bc"]



